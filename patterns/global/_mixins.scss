@import 'variables';
// Micro clearfix hack http://nicolasgallagher.com/micro-clearfix-hack/
// This clearfix hack can be used on the container element that has floated
// elements without adding new markup
@mixin clearfix {
    &:after,
    &:before {
        content: ' ';
        display: table;
    }

    &:after {
        clear: both;
    }

    .ie & {
        *zoom: 1;
    }
}
@mixin ellipsis ($max-width) {
    max-width: $max-width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin unset($display-attr) {
    // for IE TODO remove with drop of IE 11
    #{$display-attr}: inherit;
    // For all modern browsers
    #{$display-attr}: unset;
}

// Vertically center an element in another with this mixin
@mixin vertical-center {
    transform: translateY(-50%);
    position: relative;
    top: 50%;
}
@mixin keyframes($animation-name) {
    @keyframes #{$animation-name}{
        @content;
    }
}
@mixin animation($str) {
    animation: $str;
}
@mixin retina {
    @media screen and (-webkit-min-device-pixel-ratio: 1.5), screen and (min-resolution: 1.5dppx){
        @content;
    }
}

// Source: https://css-tricks.com/snippets/css/retina-display-media-query/
@mixin low-res {
    @media screen and (-webkit-max-device-pixel-ratio: 1.25), screen and (max-resolution: 120dpi){
        @content;
    }
}

// Transition the given property using consistent duration and timing function.
@mixin transition($properties...) {
    transition-property: $properties;
    transition-duration: .2s;
    transition-timing-function: ease;
}
@mixin box {
    border-radius: $border-radius;
    padding: 1rem;
    margin-bottom: $large-margin-spacing;
    @include borders;

    &.disabled {
        background: transparentize($white, .35);
        color: transparentize($base-color, $disabled-opacity);
    }
}
@mixin content-block($padding: 30px 16px, $margin: null, $border-radius: $border-radius, $background: $white) {
    background-color: $background;
    padding: $padding;
    margin: $margin;
    border-radius: $border-radius;
}

// These are mixins for the new button styles
@mixin duo-icons {
    font-family: 'Duo Admin Icons' !important;
    font-style: normal !important;
    font-weight: normal !important;
    font-variant: normal !important;
    text-transform: none !important;
    speak: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
@mixin box-shadow($shadows...) {
    @if length($shadows) == 0{
        $shadows: 0 0 0 1px $white, 0 0 0 2px currentColor;
    }
    box-shadow: $shadows;
}
@mixin transitions($effects...) {
    @if length($effects) == 0{
        $effects: all ease-in-out 150ms;
    }
    transition: $effects;
}
@mixin border-radius($radius: 4px) {
    border-radius: $radius;
}
@mixin borders($border-width: 1px, $border-type: solid, $border-color: $default-border-color) {
    border: $border-width $border-type $border-color;
}
@mixin border($direction, $border-width: 1px, $border-color: $default-border-color) {
    border-#{$direction}: $border-width solid $border-color;
}
@mixin no-box-shadow {
    box-shadow: none;
}
@mixin forward-arrow {
    content: $greaterThan;
    display: inline-block;
}
@mixin move-up($distance: -2px) {
    transform: translateY($distance);
}

// Margin Mixins

/**
* Standardized margin module
* Should use individual line for each attr of margin for readability instead of passing through a string
* Should for distance pass through a variable, static val should be a last resort
**/
$margin-sizes: (
    // Create a mapping of sizes to use for margins
    default: $default-margin-spacing,
    small: $small-margin-spacing,
    mid: $mid-margin-spacing,
    large: $large-margin-spacing,
    xlarge: $xlarge-margin-spacing
);
/**
 * [$direction - top, left, right, bottom, all - side you want to specify margin to]
 * [$distance - default, small, mid, large, xlarge - predefined distance to set margin to. Distance can also be a specific unit spec of em,px,%]
 * @type {margin-left: 1rem;}
 */
@mixin l--margin($direction: all, $distance: default) {
    @if $direction == all {
        @if type_of($distance) == number {
            margin: $distance;
        }
        @else {
            margin: map-get($margin-sizes, $distance);
        }
    }
    @else {
        @if type_of($distance) == number {
            margin-#{$direction}: $distance;
        }
        @else {
            margin-#{$direction}: map-get($margin-sizes, $distance);
        }
    }
}

/**
* Reset a specific or all margins
* [$direction - top, left, bottom, right, all - side of margin to reset]
**/
@mixin l--margin-reset($direction: all) {
    @if $direction == all {
        @include l--margin($distance: 0);
    }
    @else {
        @include l--margin($direction, 0);
    }
}


// Button reset
@mixin button-to-link-reset {
    border: none;
    @include unset($display-attr: padding);
    @include unset($display-attr: height);
    @include unset($display-attr: min-height);
    @include unset($display-attr: background-color);
    background-color: transparent;

    &:hover {
        color: inherit;
        @include unset(background-color);
        text-decoration: underline;
    }
}

// Grid specific
@mixin c--chart-doughnut($columns: 2, $rows: 1) {
    display: -ms-grid;
    display: grid;
    @if type_of($columns) == list {
        -ms-grid-columns: $columns;
        grid-template-columns: $columns;
    }

    else {
        grid-template-columns: repeat($columns, 1fr);
    }

    @if $rows == auto {
        -ms-grid-rows: auto;
        grid-template-rows: auto;
    }

    @else {
        grid-template-rows: repeat($rows, 1fr);
    }
    align-items: center;
}
@mixin l--grid-col1-fullheight($row-stop: 2) {
    -ms-grid-column: 1;
    -ms-grid-column-span: 1;
    grid-column: 1 / 1;
    -ms-grid-row: 1;
    -ms-grid-row-span: $row-stop;
    grid-row: 1 / #{$row-stop};
}
@mixin l--grid-col($columns: null) {
    @if $columns{
        grid-template-columns: repeat($columns, 1fr);
    }
    @else {
        -ms-grid-columns: auto;
        grid-template-columns: auto;
    }
}
@mixin l--grid-row($rows: null) {
    @if $rows{
        grid-template-rows: repeat($rows, 1fr);
    }
    @else {
        -ms-grid-rows: auto;
        grid-template-rows: auto;
    }
}
