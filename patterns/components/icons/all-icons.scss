@import "../../global/variables";
@import "../../global/mixins";
@import "../../global/extends";

/// Circle Icons
@mixin status-circle($color) {
    border-color: $color;
    color: $color;

    g > * {
        stroke: $color;
    }

    line {
        stroke: $color;
    }
}

.status-circle {
    border: 2px solid;
    border-radius: 50%;
    display: inline-block;
    height: 64px;
    text-align: center;
    vertical-align: middle;
    width: 64px;

    &.green {
        @include status-circle($duo-green);
    }

    &.red {
        @include status-circle($error-red);
    }

    &.gray {
        @include status-circle(#b8b8b8);
    }

    &.dark-gray {
        @include status-circle(#939393);
    }

    &.filled-green {
        @include status-circle(#FFF);
        background-color: $duo-green;
    }

    &.filled-red {
        @include status-circle(#FFF);
        background-color: $error-red;
    }

    svg {
        height: 34px;
        margin: -17px 0 0;
        position: relative;
        top: 50%;
        width: 34px;
    }
}

.red {
    color: $error-red;
}

$browsers: unknown, safari, firefox, chrome, ie, opera, edge;

.access-icon {
    background-size: 16px;
    display: inline-block;
    overflow: hidden;
    font-size: 16px;
    width: 16px;
    height: 16px;
    margin-right: 4px;
    vertical-align: -3px;
}

.browser-icon {
    background-image: url('../../images/browsers.png');
    display: none;
    margin-right: 0;
}

@for $i from 1 through length($browsers) {
    $offset: -16px * ($i - 1);
    .browser-icon-#{nth($browsers, $i)} {
        display: inline-block;
        background-position: 0 $offset;
    }
}

@include retina {
    .browser-icon {
        background-image: url('../images/browsers@2x.png');
    }
}
@include retina {
    .browser-icon {
        background-image: url('../images/browsers@2x.png');
    }
}

.plugin-icon {
    background-image: url('../images/plugins.png');

    &.plugin-icon-flash {
        background-position: 0 0;
    }

    &.plugin-icon-java {
        background-position: 0 -16px;
    }
}

.os-icon-unknown {
    display: none;
}

// validation icons from ss library
.validation.valid:before {
    content: '✓';
}

.validation:before {
    display: inline-block;
    vertical-align: middle;
}

// browser icon from image styles
.browser-icon-chrome:before {
    display: inline-block !important;
    background-position: 0 -5.94vw !important;
}

.browser-icon-firefox:before {
    display: inline-block !important;
    background-position: 0 -4vw !important;
}

.browser-icon-safari:before {
    display: inline-block !important;
    background-position: 0 -2vw !important;
}

.browser-icon-ie:before {
    display: inline-block !important;
    background-position: 0 -12vw !important;
}

.browser-icon-opera:before {
    display: inline-block !important;
    background-position: 0 -10vw !important;
}

.browser-icon:before {
    background-image: url('../images/browsers.png') !important;
    display: none;
}

.plugin-icon.plugin-icon-flash:before {
    background-position: 0 0 !important;
}

.plugin-icon.plugin-icon-java:before {
    background-position: 0 -18vw !important;
}

.plugin-icon:before {
    background-image: url('../images/plugins.png') !important;
}

///Insight type icons
.flag-US:before {
    background-position: -0.5vw -782vw !important;
}

.flag:before {
    display: inline-block;
    overflow: hidden;
    width: 4vw !important;
    height: 3vw !important;
    background-image: url('../../images/flags.png') !important;
    background-size: 5vw 907vw !important;
    background-repeat: no-repeat !important;
    background-position: -5px -6713px;
    vertical-align: -3px;
    margin-top: 3vw;
    content: ' ';
}
// Custom formatted cells
.result-cell {
    white-space: nowrap;
    text-transform: capitalize;

    &:before {
        width: 16px;
        height: 16px;
        background-size: 16px;
        vertical-align: -3px;
        margin-right: 4px;
        line-height: 12px;
        content: ' ';
        display: inline-block;
    }

    $types: (success, $success-green), (failure, #EF6000), (fraud, $warning-orange), (error, $error-red);
    @each $x in $types {
        $type: nth($x, 1);
        $color: nth($x, 2);

        &.result-#{$type} {
            color: $color;

            &:before {
                background-image: url('/images/#{$type}.png');
                background-repeat: no-repeat;
                @include retina {
                    background-image: url('/images/#{$type}@2x.png');
                }
            }
        }
    }
}

// SS standard Icons
.ss-alert.right:after,
.ss-alert:before {
    content: '⚠';
}
